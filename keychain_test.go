package scheme

import (
	"errors"
	"fmt"
	"math/big"
	"os"
	"strconv"
	"testing"

	"github.com/Algemetric/HERatio/Implementation/Golang/oracle"
	"github.com/Algemetric/HERatio/Implementation/Golang/params"
)

func TestBFVGenSK(t *testing.T) {
	// Parameters.
	p, err := params.New(params.PLBFV32)
	if err != nil {
		t.Error(err)
	}
	// Pseudo-random params.
	ri := [][]int64{{1, 0, 0, 0, -1, 1, -1, 0, -1, 1, 1, -1, -1, 1, 0, -1, 1, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, 0, -1, 1, 0}}
	// Oracle.
	o := oracle.NewOracleDouble(ri, nil)
	// Keychain.
	kc := new(Keychain)
	kc.Params = p
	kc.O = o
	// Generate secret key.
	sk, err := kc.GenSK()
	if err != nil {
		t.Error(err)
	}
	// Check secret key preset.
	skp := []int64{1, 0, 0, 0, -1, 1, -1, 0, -1, 1, 1, -1, -1, 1, 0, -1, 1, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, 0, -1, 1, 0}
	for i := 0; i < len(skp); i++ {
		if skpb := big.NewInt(skp[i]); skpb.Cmp(sk[i]) != 0 {
			t.Errorf("expected value %s at position [%d] but got %s", skpb.String(), i, sk[i].String())
			break
		}
	}
}

func TestHERatioGenSK(t *testing.T) {
	// Parameters.
	p, err := params.New(params.PLHERatio16)
	if err != nil {
		t.Error(err)
	}
	// Pseudo-random params.
	ri := [][]int64{{1, 0, 0, 0, -1, 1, -1, 0, -1, 1, 1, -1, -1, 1, 0, -1, 1, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, 0, -1, 1, 0}}
	nd := [][]int64{}
	// Oracle.
	o := oracle.NewOracleDouble(ri, nd)
	// Keychain.
	kc := new(Keychain)
	kc.Params = p
	kc.O = o
	// Generate secret key.
	sk, err := kc.GenSK()
	if err != nil {
		t.Error(err)
	}
	// Check secret key.
	skp := []int64{1, 0, 0, 0, -1, 1, -1, 0, -1, 1, 1, -1, -1, 1, 0, -1, 1, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, 0, -1, 1, 0}
	for i := 0; i < len(skp); i++ {
		if skpb := big.NewInt(skp[i]); skpb.Cmp(sk[i]) != 0 {
			t.Errorf("expected value %s at position [%d] but got %s", skpb.String(), i, sk[i].String())
			break
		}
	}
}

func TestBFVGenPK(t *testing.T) {
	// Parameters.
	p, err := params.New(params.PLBFV32)
	if err != nil {
		t.Error(err)
	}
	// Pseudo-random params.
	ri := [][]int64{{3047662976, 3648351800, -4723214805, -589412704, -2752366317, -4396812798, -3822959355, -4533739225, 1223700754, -4723897659, -3480506128, 3340699993, 1866454384, -2874149000, -1957459557, 1008485621, 2463063424, 1841973385, 2063260407, -586617775, -3878219761, 3602308653, 3609153671, -716226391, -1465250363, -2004232445, -4336824147, 2790860168, -3274517433, -2236599955, -836182508, -1477538473}}
	nd := [][]int64{{-4, 1, 0, -4, -2, -2, 6, -3, -6, 0, -4, 4, 2, 0, 3, -4, 1, 2, -3, -3, 4, -4, -4, 2, 1, -1, 3, -4, -3, -5, -11, 3}}
	// Oracle.
	o := oracle.NewOracleDouble(ri, nd)
	// Keychain.
	kc := new(Keychain)
	kc.Params = p
	kc.O = o
	// Secret key.
	sk := []int64{1, 0, 0, 0, -1, 1, -1, 0, -1, 1, 1, -1, -1, 1, 0, -1, 1, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, 0, -1, 1, 0}
	skb := make([]*big.Int, len(sk))
	for i := 0; i < len(skb); i++ {
		skb[i] = big.NewInt(sk[i])
	}
	kc.SK = skb
	// Generate public key.
	pk, err := kc.GenPK()
	if err != nil {
		t.Error(err)
	}
	// Check public key preset.
	pkp := [][]int64{{-4037345782, -3864796145, -3246898655, 1681759148, 1408805785, -1107088456, -939512624, 2391561031, 2018740801, -4359243559, -1210139052, 1799894561, 628280240, 1846844091, -4350890031, 1553927765, -4216387062, 1836069870, 2001516332, -3340617435, -1836444418, -2329243899, -3398349649, -2389753653, -538912143, 912064575, 3963899010, -4548007382, 4387623168, 560753881, 3678115029, -4662116232},
		{3047662976, 3648351800, -4723214805, -589412704, -2752366317, -4396812798, -3822959355, -4533739225, 1223700754, -4723897659, -3480506128, 3340699993, 1866454384, -2874149000, -1957459557, 1008485621, 2463063424, 1841973385, 2063260407, -586617775, -3878219761, 3602308653, 3609153671, -716226391, -1465250363, -2004232445, -4336824147, 2790860168, -3274517433, -2236599955, -836182508, -1477538473}}
	for i := 0; i < len(pkp); i++ {
		for j := 0; j < len(pkp[i]); j++ {
			if pkpb := big.NewInt(pkp[i][j]); pkpb.Cmp(pk[i][j]) != 0 {
				t.Errorf("expected value %s at position [%d][%d] but got %s", pkpb.String(), i, j, pk[i][j].String())
				break
			}
		}
	}
}

func TestHERatioGenPK(t *testing.T) {
	// Parameters.
	p, err := params.New(params.PLHERatio16)
	if err != nil {
		t.Error(err)
	}
	// Pseudo-random params.
	ri := [][]int64{{3047662976, 3648351800, -4723214805, -589412704, -2752366317, -4396812798, -3822959355, -4533739225, 1223700754, -4723897659, -3480506128, 3340699993, 1866454384, -2874149000, -1957459557, 1008485621, 2463063424, 1841973385, 2063260407, -586617775, -3878219761, 3602308653, 3609153671, -716226391, -1465250363, -2004232445, -4336824147, 2790860168, -3274517433, -2236599955, -836182508, -1477538473}}
	nd := [][]int64{{-4, 1, 0, -4, -2, -2, 6, -3, -6, 0, -4, 4, 2, 0, 3, -4, 1, 2, -3, -3, 4, -4, -4, 2, 1, -1, 3, -4, -3, -5, -11, 3}}
	// Oracle.
	o := oracle.NewOracleDouble(ri, nd)
	// Keychain.
	kc := new(Keychain)
	kc.Params = p
	kc.O = o
	// Secret key preset big.
	skp := []int64{1, 0, 0, 0, -1, 1, -1, 0, -1, 1, 1, -1, -1, 1, 0, -1, 1, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, 0, -1, 1, 0}
	skpb := make([]*big.Int, len(skp))
	for i := 0; i < len(skp); i++ {
		skpb[i] = big.NewInt(skp[i])
	}
	kc.SK = skpb
	// Generate public key.
	pk, err := kc.GenPK()
	if err != nil {
		t.Error(err)
	}
	// Check public key.
	pkp := [][]int64{{-4216387067, 1836069869, 2001516335, -3340617436, -1836444424, -2329243897, -3398349639, -2389753658, -538912150, 912064576, 3963899003, -4548007374, 4387623173, 560753886, 3678115043, -4662116239, 4037345779, 3864796148, 3246898652, -1681759155, -1408805783, 1107088450, 939512626, -2391561032, -2018740806, 4359243558, 1210139051, -1799894561, -628280241, -1846844096, 4350890023, -1553927766},
		{3047662976, 3648351800, -4723214805, -589412704, -2752366317, -4396812798, -3822959355, -4533739225, 1223700754, -4723897659, -3480506128, 3340699993, 1866454384, -2874149000, -1957459557, 1008485621, 2463063424, 1841973385, 2063260407, -586617775, -3878219761, 3602308653, 3609153671, -716226391, -1465250363, -2004232445, -4336824147, 2790860168, -3274517433, -2236599955, -836182508, -1477538473}}
	for i := 0; i < len(pkp); i++ {
		for j := 0; j < len(pkp[i]); j++ {
			if pkpb := big.NewInt(pkp[i][j]); pkpb.Cmp(pk[i][j]) != 0 {
				t.Errorf("expected value %s at position [%d][%d] but got %s", pkpb.String(), i, j, pk[i][j].String())
				break
			}
		}
	}
}

func TestBFVGenEK(t *testing.T) {
	// Parameters.
	p, err := params.New(params.PLBFV32)
	if err != nil {
		t.Error(err)
	}
	// Pseudo-random params.
	ri := [][]int64{{1720007324, 4174361130, -1044965507, 3924438480, -3456480106, -2973544064, -3975934511, 1890543970, 4669003711, -3418588942, -3513411606, 3781687093, -2976239293, -4536487024, -1998071673, 3926019078, -1106055272, -1820219249, -3194291465, -4463946424, 4251051716, -1009373237, -275264562, -1827095842, 1829765302, -4295061476, 4378397377, -2306047404, 1651000318, 3865841105, 1836734621, 3071384110},
		{-2774622614, -497553969, 22441196, -3103019905, -3390037273, 229969976, 2709838917, -2112035363, -2039992369, 4202390933, -2453635591, -1807796033, 231785954, 4498367660, 2131104630, -3591973335, 1330156222, -1131669242, -3735087423, -1056635912, 3412051809, 2896043637, -3594075230, 3002922704, -1026817562, 3177548642, -4239652937, 83285209, -338568473, 3444244013, -37284937, 3726560895},
		{-1763011266, 1047691812, -4087577526, -1396648061, 2290452197, 4753853664, -192274155, -1714872255, -4766350798, 3396078051, 3631661698, -1285158152, 2335783894, 4374869900, -91625455, 2882905604, -532196749, 4770233642, -2305309808, -27662999, 2221294577, -2598245449, -1433084070, -3964915712, -3114653801, 1853458215, 4276493177, 3833978274, -157465609, -431110507, 4155495448, -2126299762},
		{4128003758, -198265992, -3008314755, 94883595, -3239724824, -2045063722, 2123094016, 4613238440, 2129698390, 4465843979, -16409403, 4785295300, 510486989, -3034271733, -907661611, -709179980, 2831665608, -3001470646, 3572360263, 967937777, 3955336576, 4337825117, 4000180017, -2997610194, -418228098, -2976031888, 3593358232, -3334548540, -3500489897, 4648595817, 4344587316, -4222104596},
		{2914257978, 4144502886, 1777475312, -1175333834, 214499981, -1480435705, -1190914867, 828421202, 2897100994, -1815234520, 4767883567, -1842680856, -1566356417, 1090057226, -3518759459, 11729732, -3662566075, 3856317916, -769627540, -4180871204, -2295425101, 4294787420, 3307394379, 1234628285, -3555324053, 2625906568, 359020980, 4286938445, -3285712587, 1963962101, 1758771712, -2274053020}}
	nd := [][]int64{{3, 1, 3, 5, -1, 0, 6, 1, -3, -2, 2, 5, -2, 0, 3, 8, 1, -3, 1, -3, -3, -3, 4, 2, 5, -3, 2, 1, -3, -4, -4, 1},
		{2, 1, 1, 3, 1, -2, -1, -6, -5, 2, -3, 1, 2, -7, 0, 1, 4, 0, -4, -1, 1, 0, -1, -2, 1, -8, 3, -1, 0, -2, 5, 0},
		{0, -3, 2, 0, -2, 2, -1, 1, 3, 0, -1, -2, 0, 7, 2, 3, 1, -2, 3, 9, 7, -1, 4, -1, 0, -1, 2, 0, -8, 1, 1, 1},
		{-2, 5, -1, -4, 3, -5, -4, 2, -2, 2, 3, 3, 2, -4, -8, 8, 4, -2, 2, 1, 4, 4, -3, 3, 2, 3, 2, -9, 1, -4, -1, 3},
		{0, 1, 5, 2, -1, 2, 0, -2, -2, 0, 0, 0, -3, 2, 0, -3, -2, 6, 1, -8, -5, 3, -2, 2, 0, -2, 0, -9, 1, 2, 2, -2}}
	// Oracle.
	o := oracle.NewOracleDouble(ri, nd)
	// Keychain.
	kc := new(Keychain)
	kc.Params = p
	kc.O = o
	// Secret key.
	sk := []int64{1, 0, 0, 0, -1, 1, -1, 0, -1, 1, 1, -1, -1, 1, 0, -1, 1, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, 0, -1, 1, 0}
	skb := make([]*big.Int, len(sk))
	for i := 0; i < len(skb); i++ {
		skb[i] = big.NewInt(sk[i])
	}
	kc.SK = skb
	// Generate evaluation key.
	ek, err := kc.GenEK()
	if err != nil {
		t.Error(err)
	}
	// Check evaluation key.
	ekp := [][][]int64{{{-2933651022, -4669113931, 3178751750, 1185439133, 373802890, 3506534631, -3392101150, -4431994123, 3499469740, 111633450, 1021062978, 703800306, -1206085206, -3896510324, -4232777592, 4232952837, -592378272, 1232887897, -4240076599, -2507950974, -244036069, 4266860195, -3795647500, -387829447, -1063435363, 2716722645, 232312952, 2616751077, 3829735506, 3605375050, 1241720628, 1727754461}, {1720007324, 4174361130, -1044965507, 3924438480, -3456480106, -2973544064, -3975934511, 1890543970, 4669003711, -3418588942, -3513411606, 3781687093, -2976239293, -4536487024, -1998071673, 3926019078, -1106055272, -1820219249, -3194291465, -4463946424, 4251051716, -1009373237, -275264562, -1827095842, 1829765302, -4295061476, 4378397377, -2306047404, 1651000318, 3865841105, 1836734621, 3071384110}},
		{{3445169111, 2782093164, -2237478378, -4204085439, 3100154822, 589258347, -2825152667, 1474803121, 24431572, -1725089944, 4568770355, -4749657532, -2092653114, -4819319926, 4830571142, -2764063554, -965898271, -871535146, -2829273212, 3810207481, -1404723649, -2603336418, -1867004204, 4310464819, 1376129464, -4816611436, 4666530460, -2857092816, -1186824249, 2730258738, -3209970246, -4481497921}, {-2774622614, -497553969, 22441196, -3103019905, -3390037273, 229969976, 2709838917, -2112035363, -2039992369, 4202390933, -2453635591, -1807796033, 231785954, 4498367660, 2131104630, -3591973335, 1330156222, -1131669242, -3735087423, -1056635912, 3412051809, 2896043637, -3594075230, 3002922704, -1026817562, 3177548642, -4239652937, 83285209, -338568473, 3444244013, -37284937, 3726560895}},
		{{1059840651, 206323963, 3791630481, -1202064702, 2662962748, -4935430209, -4113317479, -396190326, -4167189225, -831989833, -3097502994, -942178135, 1118773810, 3230376305, 2697636224, -2438670833, 688057482, -4899613481, -2491780827, 227033392, 3832543518, 1057634933, 3420248415, 4609943253, -2660856169, -1892897143, 4123503599, 92890822, 864913431, -1505737624, 3173641005, 1678019939}, {-1763011266, 1047691812, -4087577526, -1396648061, 2290452197, 4753853664, -192274155, -1714872255, -4766350798, 3396078051, 3631661698, -1285158152, 2335783894, 4374869900, -91625455, 2882905604, -532196749, 4770233642, -2305309808, -27662999, 2221294577, -2598245449, -1433084070, -3964915712, -3114653801, 1853458215, 4276493177, 3833978274, -157465609, -431110507, 4155495448, -2126299762}},
		{{-4624142679, 2331476966, 4123314629, 1777242810, 2145941027, -4700412929, -2901516851, 1156574392, 3690843919, -3444482545, -4921937836, 3771032616, -4434937620, -3848115849, -1311907738, 1292651804, -2199048441, 1214930398, 702160833, 2645668789, -4324265179, -710444979, 4045688201, 4262805887, -4853244871, 3564411812, 2947983617, -2602216716, -3158794619, 94131916, 4795511055, -4662762383}, {4128003758, -198265992, -3008314755, 94883595, -3239724824, -2045063722, 2123094016, 4613238440, 2129698390, 4465843979, -16409403, 4785295300, 510486989, -3034271733, -907661611, -709179980, 2831665608, -3001470646, 3572360263, 967937777, 3955336576, 4337825117, 4000180017, -2997610194, -418228098, -2976031888, 3593358232, -3334548540, -3500489897, 4648595817, 4344587316, -4222104596}},
		{{-1755918061, 2163124368, 3514670678, -2201005625, 466405185, -1156315707, -2729443929, -1261292201, 339374607, 4198210376, -1598871678, -3613671212, 2789632305, 4060088788, 330200374, -4198838205, -822581335, -11711246, -4343916138, 3886361617, 616446632, -3022649821, -966271649, 3970329749, 4540970967, -2838860296, 1291466436, -1410166276, 1263571800, -575437479, 1250946356, 3583779062}, {2914257978, 4144502886, 1777475312, -1175333834, 214499981, -1480435705, -1190914867, 828421202, 2897100994, -1815234520, 4767883567, -1842680856, -1566356417, 1090057226, -3518759459, 11729732, -3662566075, 3856317916, -769627540, -4180871204, -2295425101, 4294787420, 3307394379, 1234628285, -3555324053, 2625906568, 359020980, 4286938445, -3285712587, 1963962101, 1758771712, -2274053020}}}
	for i := 0; i < len(ekp); i++ {
		for j := 0; j < len(ekp[i]); j++ {
			for z := 0; z < len(ekp[i][j]); z++ {
				if ekpb := big.NewInt(ekp[i][j][z]); ekpb.Cmp(ek[i][j][z]) != 0 {
					t.Errorf("expected value %s at position [%d][%d][%d] but got %s", ek[i][j][z].String(), i, j, z, ekpb.String())
					break
				}
			}
		}
	}
}

func TestHERatioGenEK(t *testing.T) {
	// Parameters.
	p, err := params.New(params.PLHERatio16)
	if err != nil {
		t.Error(err)
	}
	// Pseudo-random params.
	ri := [][]int64{{1720007324, 4174361130, -1044965507, 3924438480, -3456480106, -2973544064, -3975934511, 1890543970, 4669003711, -3418588942, -3513411606, 3781687093, -2976239293, -4536487024, -1998071673, 3926019078, -1106055272, -1820219249, -3194291465, -4463946424, 4251051716, -1009373237, -275264562, -1827095842, 1829765302, -4295061476, 4378397377, -2306047404, 1651000318, 3865841105, 1836734621, 3071384110},
		{-2774622614, -497553969, 22441196, -3103019905, -3390037273, 229969976, 2709838917, -2112035363, -2039992369, 4202390933, -2453635591, -1807796033, 231785954, 4498367660, 2131104630, -3591973335, 1330156222, -1131669242, -3735087423, -1056635912, 3412051809, 2896043637, -3594075230, 3002922704, -1026817562, 3177548642, -4239652937, 83285209, -338568473, 3444244013, -37284937, 3726560895},
		{-1763011266, 1047691812, -4087577526, -1396648061, 2290452197, 4753853664, -192274155, -1714872255, -4766350798, 3396078051, 3631661698, -1285158152, 2335783894, 4374869900, -91625455, 2882905604, -532196749, 4770233642, -2305309808, -27662999, 2221294577, -2598245449, -1433084070, -3964915712, -3114653801, 1853458215, 4276493177, 3833978274, -157465609, -431110507, 4155495448, -2126299762},
		{4128003758, -198265992, -3008314755, 94883595, -3239724824, -2045063722, 2123094016, 4613238440, 2129698390, 4465843979, -16409403, 4785295300, 510486989, -3034271733, -907661611, -709179980, 2831665608, -3001470646, 3572360263, 967937777, 3955336576, 4337825117, 4000180017, -2997610194, -418228098, -2976031888, 3593358232, -3334548540, -3500489897, 4648595817, 4344587316, -4222104596},
		{2914257978, 4144502886, 1777475312, -1175333834, 214499981, -1480435705, -1190914867, 828421202, 2897100994, -1815234520, 4767883567, -1842680856, -1566356417, 1090057226, -3518759459, 11729732, -3662566075, 3856317916, -769627540, -4180871204, -2295425101, 4294787420, 3307394379, 1234628285, -3555324053, 2625906568, 359020980, 4286938445, -3285712587, 1963962101, 1758771712, -2274053020}}
	nd := [][]int64{{3, 1, 3, 5, -1, 0, 6, 1, -3, -2, 2, 5, -2, 0, 3, 8, 1, -3, 1, -3, -3, -3, 4, 2, 5, -3, 2, 1, -3, -4, -4, 1},
		{2, 1, 1, 3, 1, -2, -1, -6, -5, 2, -3, 1, 2, -7, 0, 1, 4, 0, -4, -1, 1, 0, -1, -2, 1, -8, 3, -1, 0, -2, 5, 0},
		{0, -3, 2, 0, -2, 2, -1, 1, 3, 0, -1, -2, 0, 7, 2, 3, 1, -2, 3, 9, 7, -1, 4, -1, 0, -1, 2, 0, -8, 1, 1, 1},
		{-2, 5, -1, -4, 3, -5, -4, 2, -2, 2, 3, 3, 2, -4, -8, 8, 4, -2, 2, 1, 4, 4, -3, 3, 2, 3, 2, -9, 1, -4, -1, 3},
		{0, 1, 5, 2, -1, 2, 0, -2, -2, 0, 0, 0, -3, 2, 0, -3, -2, 6, 1, -8, -5, 3, -2, 2, 0, -2, 0, -9, 1, 2, 2, -2}}
	// Oracle.
	o := oracle.NewOracleDouble(ri, nd)
	// Keychain.
	kc := new(Keychain)
	kc.Params = p
	kc.O = o
	// Secret key preset big.
	skp := []int64{1, 0, 0, 0, -1, 1, -1, 0, -1, 1, 1, -1, -1, 1, 0, -1, 1, 1, 1, 0, 0, 1, 0, -1, 0, -1, 1, 0, 0, -1, 1, 0}
	skpb := make([]*big.Int, len(skp))
	for i := 0; i < len(skp); i++ {
		skpb[i] = big.NewInt(skp[i])
	}
	kc.SK = skpb
	// Generate evaluation key.
	ek, err := kc.GenEK()
	if err != nil {
		t.Error(err)
	}
	// Check evaluation key.
	ekp := [][][]int64{{{-592378270, 1232887901, -4240076597, -2507950966, -244036067, 4266860198, -3795647498, -387829448, -1063435371, 2716722646, 232312952, 2616751081, 3829735507, 3605375054, 1241720635, 1727754468, 2933651026, 4669113929, -3178751746, -1185439131, -373802894, -3506534634, 3392101160, 4431994126, -3499469738, -111633455, -1021062974, -703800300, 1206085201, 3896510320, 4232777591, -4232952828},
		{1720007324, 4174361130, -1044965507, 3924438480, -3456480106, -2973544064, -3975934511, 1890543970, 4669003711, -3418588942, -3513411606, 3781687093, -2976239293, -4536487024, -1998071673, 3926019078, -1106055272, -1820219249, -3194291465, -4463946424, 4251051716, -1009373237, -275264562, -1827095842, 1829765302, -4295061476, 4378397377, -2306047404, 1651000318, 3865841105, 1836734621, 3071384110}},
		{{-965898273, -871535145, -2829273207, 3810207485, -1404723649, -2603336420, -1867004204, 4310464815, 1376129458, -4816611426, 4666530454, -2857092814, -1186824247, 2730258733, -3209970251, -4481497920, -3445169105, -2782093163, 2237478375, 4204085441, -3100154820, -589258349, 2825152665, -1474803129, -24431576, 1725089938, -4568770355, 4749657532, 2092653116, 4819319917, -4830571137, 2764063555},
			{-2774622614, -497553969, 22441196, -3103019905, -3390037273, 229969976, 2709838917, -2112035363, -2039992369, 4202390933, -2453635591, -1807796033, 231785954, 4498367660, 2131104630, -3591973335, 1330156222, -1131669242, -3735087423, -1056635912, 3412051809, 2896043637, -3594075230, 3002922704, -1026817562, 3177548642, -4239652937, 83285209, -338568473, 3444244013, -37284937, 3726560895}},
		{{688057481, -4899613482, -2491780828, 227033383, 3832543509, 1057634936, 3420248410, 4609943255, -2660856166, -1892897142, 4123503596, 92890820, 864913439, -1505737618, 3173641006, 1678019941, -1059840650, -206323968, -3791630476, 1202064711, -2662962743, 4935430210, 4113317482, 396190326, 4167189228, 831989832, 3097502995, 942178133, -1118773818, -3230376297, -2697636221, 2438670837},
			{-1763011266, 1047691812, -4087577526, -1396648061, 2290452197, 4753853664, -192274155, -1714872255, -4766350798, 3396078051, 3631661698, -1285158152, 2335783894, 4374869900, -91625455, 2882905604, -532196749, 4770233642, -2305309808, -27662999, 2221294577, -2598245449, -1433084070, -3964915712, -3114653801, 1853458215, 4276493177, 3833978274, -157465609, -431110507, 4155495448, -2126299762}},
		{{-2199048447, 1214930405, 702160830, 2645668784, -4324265180, -710444988, 4045688200, 4262805886, -4853244875, 3564411811, 2947983618, -2602216704, -3158794618, 94131916, 4795511048, -4662762378, 4624142681, -2331476963, -4123314628, -1777242813, -2145941020, 4700412928, 2901516844, -1156574387, -3690843919, 3444482550, 4921937841, -3771032622, 4434937623, 3848115841, 1311907729, -1292651793},
			{4128003758, -198265992, -3008314755, 94883595, -3239724824, -2045063722, 2123094016, 4613238440, 2129698390, 4465843979, -16409403, 4785295300, 510486989, -3034271733, -907661611, -709179980, 2831665608, -3001470646, 3572360263, 967937777, 3955336576, 4337825117, 4000180017, -2997610194, -418228098, -2976031888, 3593358232, -3334548540, -3500489897, 4648595817, 4344587316, -4222104596}},
		{{-822581333, -11711251, -4343916134, 3886361627, 616446636, -3022649822, -966271647, 3970329745, 4540970965, -2838860294, 1291466436, -1410166267, 1263571796, -575437479, 1250946354, 3583779061, 1755918059, -2163124361, -3514670672, 2201005619, -466405191, 1156315712, 2729443927, 1261292201, -339374609, -4198210378, 1598871678, 3613671203, -2789632307, -4060088784, -330200372, 4198838200},
			{2914257978, 4144502886, 1777475312, -1175333834, 214499981, -1480435705, -1190914867, 828421202, 2897100994, -1815234520, 4767883567, -1842680856, -1566356417, 1090057226, -3518759459, 11729732, -3662566075, 3856317916, -769627540, -4180871204, -2295425101, 4294787420, 3307394379, 1234628285, -3555324053, 2625906568, 359020980, 4286938445, -3285712587, 1963962101, 1758771712, -2274053020}}}
	for i := 0; i < len(ekp); i++ {
		for j := 0; j < len(ekp[i]); j++ {
			for z := 0; z < len(ekp[i][j]); z++ {
				if ekpb := big.NewInt(ekp[i][j][z]); ekpb.Cmp(ek[i][j][z]) != 0 {
					t.Errorf("expected value %s at position [%d][%d][%d] but got %s", ek[i][j][z].String(), i, j, z, ekpb.String())
					break
				}
			}
		}
	}
}

func equalKeychain(kc1, kc2 *Keychain) error {
	// Check secret key.
	for i := 0; i < len(kc1.SK); i++ {
		if kc1.SK[i].Cmp(kc2.SK[i]) != 0 {
			return errors.New("expected value " + kc1.SK[i].String() + " at position [" + strconv.Itoa(i) + "] but got " + kc2.SK[i].String())
		}
	}
	// Check public key.
	for i := 0; i < len(kc1.PK); i++ {
		for j := 0; j < len(kc1.PK[i]); j++ {
			if kc1.PK[i][j].Cmp(kc2.PK[i][j]) != 0 {
				return errors.New("expected value " + kc1.PK[i][j].String() + " at position [" + strconv.Itoa(i) + "][" + strconv.Itoa(j) + "] but got " + kc2.PK[i][j].String())
			}
		}
	}
	// Check evaluation key.
	for i := 0; i < len(kc1.EK); i++ {
		for j := 0; j < len(kc1.EK[i]); j++ {
			for k := 0; k < len(kc1.EK[i][j]); k++ {
				if kc1.EK[i][j][k].Cmp(kc2.EK[i][j][k]) != 0 {
					return errors.New("expected value " + kc1.EK[i][j][k].String() + " at position [" + strconv.Itoa(i) + "][" + strconv.Itoa(j) + "][" + strconv.Itoa(k) + "] but got " + kc2.EK[i][j][k].String())
				}
			}
		}
	}
	// Check parameters.
	// Degree.
	if kc1.Params.Literal.Degree != kc2.Params.Literal.Degree {
		return errors.New(fmt.Sprintf("expected value %d but got %d", kc1.Params.Literal.Degree, kc2.Params.Literal.Degree))
	}
	// Expansion base.
	if kc1.Params.Literal.ExpansionBase != kc2.Params.Literal.ExpansionBase {
		return errors.New(fmt.Sprintf("expected value %d but got %d", kc1.Params.Literal.ExpansionBase, kc2.Params.Literal.ExpansionBase))
	}
	// Coefficient modulus.
	if kc1.Params.Literal.CoefficientModulus != kc2.Params.Literal.CoefficientModulus {
		return errors.New(fmt.Sprintf("expected value %d but got %d", kc1.Params.Literal.CoefficientModulus, kc2.Params.Literal.CoefficientModulus))
	}
	// Decryption modulus.
	if kc1.Params.Literal.DecryptionModulus != kc2.Params.Literal.DecryptionModulus {
		return errors.New(fmt.Sprintf("expected value %d but got %d", kc1.Params.Literal.DecryptionModulus, kc2.Params.Literal.DecryptionModulus))
	}
	// Relinearization expansion base.
	if kc1.Params.Literal.RelinearizationExpansionBase != kc2.Params.Literal.RelinearizationExpansionBase {
		return errors.New(fmt.Sprintf("expected value %d but got %d", kc1.Params.Literal.RelinearizationExpansionBase, kc2.Params.Literal.RelinearizationExpansionBase))
	}
	// Standard deviation.
	if kc1.Params.Literal.StandardDeviation != kc2.Params.Literal.StandardDeviation {
		return errors.New(fmt.Sprintf("expected value %f but got %f", kc1.Params.Literal.StandardDeviation, kc2.Params.Literal.StandardDeviation))
	}
	// Bound.
	if kc1.Params.Literal.Bound != kc2.Params.Literal.Bound {
		return errors.New(fmt.Sprintf("expected value %d but got %d", kc1.Params.Literal.Bound, kc2.Params.Literal.Bound))
	}
	// Factor.
	if kc1.Params.Literal.Factor != kc2.Params.Literal.Factor {
		return errors.New(fmt.Sprintf("expected value %d but got %d", kc1.Params.Literal.Factor, kc2.Params.Literal.Factor))
	}
	// Scheme.
	if kc1.Params.Literal.Scheme != kc2.Params.Literal.Scheme {
		return errors.New(fmt.Sprintf("expected value %d but got %d", kc1.Params.Literal.Scheme, kc2.Params.Literal.Scheme))
	}
	return nil
}

// TestStoreKeychain tests if a new keychain is correctly stored.
func TestStoreKeychain(t *testing.T) {
	// Case: create a new keychain, copy the content to preserve and store the original.
	// Then, restore the stored version and compare the keys to check correctness.
	// Parameters.
	p, err := params.New(params.PLBFV32)
	if err != nil {
		t.Error(err)
	}
	// Filename for testing.
	filepath := "./keys/PLBFV32.kc"
	// Oracle.
	o := new(oracle.Oracle)
	// Erase files.
	if err = os.Remove(filepath); err != nil {
		t.Error(err)
	}
	// New keychain.
	kc1, err := NewKeychain(o, p)
	if err != nil {
		t.Error(err)
	}
	// Store keychain.
	err = kc1.marshal(filepath)
	if err != nil {
		t.Error(err)
	}
	// Restore keychain in a different variable.
	kc2 := new(Keychain)
	err = kc2.unmarshal(filepath)
	if err != nil {
		t.Error(err)
	}
	// Compare files to check if the recovered keychain is identical.
	if err := equalKeychain(kc1, kc2); err != nil {
		t.Errorf(err.Error())
	}
}

// TestSetupKeychain tests if a new keychain is correctly setup.
// The setup function checks if a key exists before storing.
// If a key already exists then it is recovered, if not so, it is stored.
func TestSetupKeychain(t *testing.T) {
	// Case: create a new keychain...
	// Parameters.
	p, err := params.New(params.PLBFV32)
	if err != nil {
		t.Error(err)
	}
	// Filename for testing.
	filename := "PLBFV32.kc"
	filepath := Dir + filename
	// Oracle.
	o := new(oracle.Oracle)
	// Erase files.
	if err = os.Remove(filepath); err != nil {
		t.Error(err)
	}
	// New keychain.
	kc1, err := Setup(filename, o, p)
	if err != nil {
		t.Error(err)
	}
	// Restore keychain in a different variable.
	kc2 := new(Keychain)
	err = kc2.unmarshal(filepath)
	if err != nil {
		t.Error(err)
	}
	// Compare files to check if the recovered keychain is identical.
	if err := equalKeychain(kc1, kc2); err != nil {
		t.Errorf(err.Error())
	}
}
